from openerp.osv import osv,fields
from openerp.tools.translate import _
class invoices_Wizard(osv.TransientModel):
	_name = 'innova_stock_plus.invoices'
	_columns = {
	'partner_id': fields.many2one('res.partner', 'Customer', change_default=True, select=1,required=True),
	'account_id_some1':fields.many2many('account.invoice','account_account_rel4','id1','id2','some'),
				}
	def validate(self, cr, uid, ids, context=None):
		inv_lines=[]
		inv_obj = self.pool.get('account.invoice')
		pick_obj = self.pool.get('stock.picking')
		
		inv_line_obj = self.pool.get('account.invoice.line')
		invoices=context.get('account_id_some1',False)[0]
		partner_id=context.get('partner_id',False)
		invoice_ids= invoices[2]
		pick_lines=[]
		invoice=[]
		if len(invoice_ids)==0:
			ir_model_data = self.pool.get('ir.model.data')
			form_res = ir_model_data.get_object_reference(cr, uid, 'sale', 'view_order_form')
			form_id = form_res and form_res[1] or False
			tree_res = ir_model_data.get_object_reference(cr, uid, 'sale', 'view_quotation_tree')
			tree_id = tree_res and tree_res[1] or False
			return {
			'name': _('Invoice'),
			'view_type': 'form',
			'partner_id':partner_id,
			'view_mode': 'form,tree',
			'res_model': 'sale.order',
			'view_id': False,
			 
			 #'target': 'current',
			'views': [(form_id, 'form'), (tree_id, 'tree')],
			'context': {'default_type_order':'in_order', 'type':'in_order','partner_id':partner_id},
			'type': 'ir.actions.act_window',
        	}
		for invoice in self.pool.get('account.invoice').browse(cr,uid,invoice_ids,context=None):
			for line in invoice.invoice_line:
				inv_line_data=self._prepare_inv_line(cr,uid,line.product_id.categ_id.property_account_income_categ.id,line,invoice.number)
				inv_line_id = inv_line_obj.create(cr, uid, inv_line_data, context=context)
				inv_lines.append(inv_line_id)
		
		inv_data = self._prepare_invoice(cr, uid, invoice, inv_lines, partner_id,context=context)
		inv_id = inv_obj.create(cr, uid, inv_data, context=context)
		ir_model_data = self.pool.get('ir.model.data')
		form_res = ir_model_data.get_object_reference(cr, uid, 'account', 'invoice_form')
		form_id = form_res and form_res[1] or False
		tree_res = ir_model_data.get_object_reference(cr, uid, 'account', 'invoice_tree')
		tree_id = tree_res and tree_res[1] or False
        	return {
			'name': _('Invoice'),
			'view_type': 'form',
			'view_mode': 'form,tree',
			'res_model': 'account.invoice',
			'res_id': inv_id,
			'view_id': False,
			#'views': [(form_id, 'form'), (tree_id, 'tree')],
			'views': [(form_id, 'form')],
			'context': {'type': 'out_refund'},
			'type': 'ir.actions.act_window',
        	}
        	return {'type': 'ir.actions.act_window_close'}
		
	def _prepare_inv_line(self, cr, uid, account_id, inv,ref, context=None):
		return {
			'name':inv.name,
			'account_id': account_id,
			'price_unit': inv.price_unit or 0.0,
			'quantity': inv.quantity,
			'product_id': inv.product_id.id or False,
			'uos_id': inv.uos_id.id or False,
			'invoice_line_tax_id': [(6, 0, [x.id for x in inv.invoice_line_tax_id])],
			'account_analytic_id': inv.account_analytic_id.id or False,
			'purchase_line_id': inv.purchase_line_id,
			'wizardcall':True,
			'invoice_call':ref,
        }
	def _prepare_invoice(self, cr, uid, order, line_ids, partner_id, context=None):
		partner_obj = self.pool.get('res.partner')
		partner_id=partner_obj.browse(cr,uid,partner_id,context=None)
		user_obj=self.pool.get('res.users')
		user_id=user_obj.browse(cr,uid,uid,context=None)
		journal_ids = self.pool['account.journal'].search(cr, uid, [('type', '=', 'sale_refund'),('company_id', '=', user_id.company_id.id)],limit=1)
		if not journal_ids:
			raise osv.except_osv( _('Error!'),_('Define purchase journal for this company: "%s" (id:%d).') %(user_id.company_id.name, user_id.company_id.id))
		if not order:
			return {
				'account_id': partner_id.property_account_receivable.id or False,
				'type': 'out_refund',
				'partner_id': partner_id.id or False,
				'journal_id': len(journal_ids) and journal_ids[0]  or False,
				'company_id': partner_id.company_id.id ,
        		}			
		if not order:
			return {}
		
		return {
			'name':  order.name or False,
			'account_id': order.account_id.id or partner_id.property_acccount_receivable.id or False,
			'type': 'out_refund',
			'partner_id': partner_id.id or False,
			'currency_id': order.currency_id.id or False,
			'journal_id': len(journal_ids) and journal_ids[0] or  False,
			'invoice_line': [(6, 0, line_ids)],
			'fiscal_position': order.fiscal_position.id or False,
			'company_id': order.company_id.id or partner_id.company_id.id ,
			'wizardcall':True,
        		}
