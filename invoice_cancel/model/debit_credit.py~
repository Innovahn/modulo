# -*- coding: utf-8 -*-

from openerp import models, api
from openerp.osv import fields, osv
import openerp.addons.decimal_precision as dp
from datetime import datetime
import locale
import pytz
from openerp.tools.translate import _
import time
from itertools import ifilter

class debit_credit(osv.Model):
	_order = 'date desc'
	_name = 'debit.credit'
	_description='banks.debit_credit'
	_inherit = ['mail.thread']
	
	_track = {
        'state': {
            'debit_credit.debit_credit_state_change': lambda self, cr, uid, obj, context=None: True,
       		 },
	 'total': {
            'debit_credit.debit_credit_total_change': lambda self, cr, uid, obj, context=None: True,
       		 },
   	 }



	#function that brings currency rates from a particular
	def calculate_curr_rates(self,cr, uid, ids,context=None):
		company_currency = None
		journal_currency = None
		model_user = self.pool.get('res.users')
		obj_user = model_user.browse(cr,uid,model_user.search(cr,uid,[('id' , '=', uid )],context=None),context=context)
		model_company = self.pool.get('res.company')
		obj_company = model_company.browse(cr,uid,model_company.search(cr,uid,[('id' , '=', obj_user.company_id.id )],context=None),context=context)
		for mcheck in self.browse(cr,uid,ids,context=context):
			company_currency = obj_company.currency_id.with_context(date=mcheck.date)
			if mcheck.journal_id.currency:
				journal_currency = mcheck.journal_id.currency.with_context(date=mcheck.date)
				if company_currency and journal_currency: 
					return {'company_curr_id' : company_currency.id , 'company_curr_rate' : company_currency.rate ,'journal_curr_id': journal_currency.id, 'journal_curr_rate': journal_currency.rate}
				else:
					raise osv.except_osv(_('Error!'),_("Operation was not finished, Try Again") )
			else:
				if company_currency:
					return {'company_curr_id' : company_currency.id , 'company_curr_rate' : company_currency.rate ,'journal_curr_id': None, 'journal_curr_rate': None}
				else:
					raise osv.except_osv(_('Error!'),_("Operation was not finished, Try Again") )

	def anulate_draft_voucher(self, cr, uid, ids, context=None):
		for debit_credit in self.browse(cr,uid,ids,context=context):
			self.update_sequence(cr, uid, ids, debit_credit.journal_id.id, debit_credit.doc_type, context=None)
			self.write(cr, uid, ids,{'state':'anulated','anulation_date' : debit_credit.id.date}, context=context)

	def _get_sequence(self, cr, uid,  ids, journalid,doc_type, context=None):
		
		journal_obj = self.pool.get('account.journal')
		diario = journal_obj.browse(cr,uid,journal_obj.search(cr,uid,[('id','=',journalid)],context=None),context=context)
		seq_id = None
		have_multi=False
		for sq in diario.sequence_ids:
			have_multi = True
			if sq.code == doc_type:
				seq_id = sq.id
		return {'result' : have_multi, 'seq_id' : seq_id}

	def existe_number(self, cr, uid, isd,number, context = None):
		mcheck_pool = self.pool.get('debit.credit')
		mids = mcheck_pool.search(cr, uid, [('state','=','validated')] , context =context)
		for mcheck in self.browse(cr, uid, mids, context = context):	
			if mcheck.number == number:
				return True
		return False

	def action_validate(self, cr, uid, ids, context=None):
		corrency_rate = 0.0
		model_currency_rate = None
		decimal_precision = self.pool.get('decimal.precision')
		dec_prec = decimal_precision.browse(cr,uid,decimal_precision.search(cr,uid,[('name' , '=', 'Account' )],context=None),context=context)
		for m in self.browse(cr,uid,ids,context=context):
			model_user = self.pool.get('res.users')
			obj_user = model_user.browse(cr,uid,model_user.search(cr,uid,[('id' , '=', uid )],context=None),context=context)
			model_company = self.pool.get('res.company')
			obj_company = model_company.browse(cr,uid,model_company.search(cr,uid,[('id' , '=', obj_user.company_id.id )],context=None),context=context)
			
		curr_rates={}
		curr_rates = self.calculate_curr_rates(cr, uid, ids, context=context)
		currency_rate = curr_rates['company_curr_rate']
		currency_id = curr_rates['company_curr_id']
		for mcheck in self.browse(cr,uid,ids,context=context):
			if len(mcheck.mcheck_ids) > 0:
				total=0
				totald=0
				totalc=0
				flag=True
				
				select_journal_currency_id = curr_rates['journal_curr_id']#the currency of the journal selected, if it dosent have it, it will see if the default account have a currency, in defect it will be the default company currency
				if select_journal_currency_id:#if there is a secundary currency, brings the curency rate for this currency
				
					select_journal_currency_rate = curr_rates['journal_curr_rate']#rate of the currently selected journal				
					#select_journal_currency_name = curr_rates['company_curr_rate']
				else: #if there was not a secundary currency, wi will use the ones that la compania usa
					select_journal_currency_rate = currency_rate 
					select_journal_currency_id = currency_id
				account_period = self.pool.get('account.period')
				account_period_obj = account_period.browse(cr,uid,account_period.search(cr,uid,['&','&',( 'date_start','<=', mcheck.date ),('date_stop', '>=',mcheck.date),('special','<>',True),('company_id','=',mcheck.journal_id.company_id.id),('state', '=', 'draft')],context=None),context=context) 
				if not account_period_obj:
					raise osv.except_osv(_('Error!'),_("There is not an open period for you company on the selected date"))
				for line in mcheck.mcheck_ids:
					total+=line.amount
					if line.amount <= 0:
						flag=False
					if line.type=='dr':
						totald+=line.amount
					if line.type=='cr':
						totalc+=line.amount
				
				totalc_curr = 0
				totald_curr = 0
				totald=0
				totalc=0
				lines_array=[]
				name = "/"
				if mcheck.number:
					if self.existe_number(cr, uid, ids, mcheck.number, context=context):
						raise osv.except_osv(_('Error'),_("This number belong to a validated check, you can not create journal items with the same number") )
					else:
						name=mcheck.number
				amove_obj= self.pool.get('account.move')
				amovedata={}
				amovedata['journal_id']=mcheck.journal_id.id
				amovedata['name']=name
				amovedata['date']=mcheck.date
				amovedata['period_id']=account_period_obj.id
				amovedata['ref']=mcheck.name					
				seq_obj = self.pool.get('ir.sequence')

				move_id= amove_obj.create(cr,uid,amovedata)
				mline_obj= self.pool.get('account.move.line')
				for lin in mcheck.mcheck_ids:
					if not lin.name:
						new_name = mcheck.name
						self.write(cr, uid, ids,{'mcheck_ids': [(1,lin.id,{'name':new_name})]}, context=context)
				for lines in mcheck.mcheck_ids:
					lines_col={}
					lines_col['move_id']=move_id
					lines_col['account_id']=lines.account_id.id
					lines_col['name']=lines.name  or '/'
					if lines.type == 'dr':
							lines_col['credit']=0
							
							if (select_journal_currency_rate !=0):
								lines_col['debit'] = round((lines.amount * (1/select_journal_currency_rate))*currency_rate,dec_prec.digits)
							else:
								lines_col['debit'] = round(lines.amount * currency_rate,dec_prec.digits)
							totald+=lines_col['debit']
							if select_journal_currency_id == currency_id:#si el currency de 
								totald_curr+=lines_col['debit']
							else:
								lines_col['amount_currency']=(lines.amount * (1/select_journal_currency_rate))*select_journal_currency_rate#shame on me, hahahaha 1(x/y)y=x
								lines_col['currency_id'] = select_journal_currency_id
								totald_curr+=lines.amount
							
														
					else:
							lines_col['debit']=0
							lines_col['credit'] = round(((lines.amount * (1/select_journal_currency_rate))*currency_rate),dec_prec.digits)
							totalc+=lines_col['credit']  #total of debit multiplicated by default
							if select_journal_currency_id == currency_id:
								totalc_curr+=lines_col['credit']
							else:
								lines_col['amount_currency'] = (lines.amount * (1/select_journal_currency_rate))*(-1)*select_journal_currency_rate
								lines_col['currency_id'] = select_journal_currency_id
								totalc_curr+=lines.amount
					lines_col['move_id']=move_id
					lines_col['date']=mcheck.date
					lines_col['credit_debit_id']=mcheck.id
					lines_col['analytic_account_id']=lines.chqmanalitics.id
					lines_array.append(lines_col)
				mline_data={}
				mline_data['move_id']=move_id
				mline_data['name'] = mcheck.name
				if mcheck.doc_type == 'debit':
					mline_data['credit']=totald-totalc#correct
					mline_data['debit']=0
				else:
					mline_data['credit']=0
					mline_data['debit']=totalc-totald#correct
				
					
				mline_data['date']=mcheck.date
				if not (currency_id == select_journal_currency_id):
					mline_data['currency_id'] = select_journal_currency_id
					mline_data['amount_currency']=((totald_curr-totalc_curr) * (1/select_journal_currency_rate)*select_journal_currency_rate)*(-1)
						
					
				mline_data['account_id']=mcheck.journal_id.default_credit_account_id.id
				mline_data['credit_debit_id']=mcheck.id
				if mcheck.doc_type == 'debit':
					if round(totald_curr-totalc_curr,dec_prec.digits ) != round(mcheck.total,dec_prec.digits ):
						raise osv.except_osv(_('you still have '+str(mcheck.total-(totald_curr-totalc_curr))),_("Try to make it fit") )
				else:
					if round(totalc_curr-totald_curr,dec_prec.digits ) != round(mcheck.total,dec_prec.digits ):
						raise osv.except_osv(_('you still have '+str(mcheck.total-(totalc_curr-totald_curr))),_("Try to make it fit") )
				
					
				line_id= mline_obj.create(cr,uid,mline_data)
				for lines2 in lines_array:
					mline_obj.create(cr,uid,lines2)
					
				if currency_id == select_journal_currency_id:
					select_journal_currency_rate = False
				dcr_pool = self.pool.get('debit.credit')
				if not mcheck.was_unreconcilied:
					n=self.journal_number(cr,uid,mcheck.id,mcheck.journal_id.id,mcheck.doc_type,context=None)
					nids = dcr_pool.search(cr, uid,[('number', '=', n),('state' , '!=', 'draft')])
					if len(nids) > 0:
						raise osv.except_osv(_('Error!'),_("Number most be unique for validated debit or credit, you may have to check the sequence of you journal") )
					self.update_sequence(cr, uid, mcheck.id,mcheck.journal_id.id,mcheck.doc_type, context=None)
					
				else:
					n = mcheck.number
					nids = dcr_pool.search(cr, uid,[('number', '=', n),('state' , '!=', 'draft')])
					if len(nids) > 0:
						raise osv.except_osv(_('Error!'),_("Number most be unique for validated debit or credit, you may have to check the sequence of you journal") )
						
				
				self._update_draft(cr,uid, ids,mcheck.journal_id.id,mcheck.doc_type, context=context)
				jour_comp_id = None
				if mcheck.journal_id.company_id.id:
					jour_comp_id = mcheck.journal_id.company_id.id
				else:
					jour_comp_id = self.pool.get('res.user').browse(cr,uid,uid, context=context).company_id.id
				
				return self.write(cr, uid, ids, {'state':'validated','number':n,'move_id':move_id, 'actual_comp_rate': currency_rate,'actual_sec_curr_rate': select_journal_currency_rate, 'jour_company_id' : jour_comp_id }, context=context)
		else:
			raise osv.except_osv(_('No lines'),_("select more than one line") )
		
	def update_sequence(self,cr, uid, ids, journal_id, doc_type, context=None):
		journa_obj = self.pool.get('account.journal')
		diario = journa_obj.browse(cr,uid,journa_obj.search(cr,uid,[('id','=',journal_id)],context=None),context=context)
		seq_id=0
		fl=False
		for d in diario.sequence_ids:
			if d.code==doc_type:
				seq_id=d.id
				fl=True
		if fl:
			cr.execute("UPDATE ir_sequence SET number_next = number_next +number_increment WHERE id=%s ", (seq_id,))
		else:						
			raise osv.except_osv(_('Error !'),_("Could't update the sequence for this journal!"))

	def _update_draft(self, cr, uid, ids, journal_id,doc_type, context=None):
		seq = self._get_sequence(cr, uid, ids, journal_id,doc_type, context=None)
		if seq['seq_id'] != None:
			debit_credit_model = self.pool.get('debit.credit')#update deposits that are in draft state
			debit_credit_obj=debit_credit_model.browse(cr,uid,debit_credit_model.search(cr,uid,[('state','=','draft' ),('doc_type','=',doc_type),('journal_id','=',journal_id),('was_unreconcilied','!=',True )],context=None),context=context)
			nn=self.journal_number(cr,uid, ids,journal_id,doc_type,context=None)
			for draft_debit_credit in debit_credit_obj:
				debit_credit_model.write(cr, uid, draft_debit_credit.id, {'number':nn}, context=context)

	def evaluar_template(self, cr, uid, ids,template,doc_type, context= None):
		temp_type = None
		if template:
			bt = self.pool.get('banks.template').browse(cr,uid,template,context=context)
			temp_type = bt.doc_type
			debit_credit_pool = self.pool.get('debit.credit')
			dc = debit_credit_pool.browse(cr,uid,bt.doc_id,context=context)
			debit_credit_name_pool = self.pool.get('debit.credit.name')
			line_ids=debit_credit_name_pool.search(cr, uid, [('mcheck_id','=',dc.id)],context=context)
			list_of_lines=[]
			for lineas in debit_credit_name_pool.browse(cr, uid , line_ids, context=context ):
				new_line={}
				if lineas.account_id.id:
					new_line['account_id']=lineas.account_id.id
				if lineas.amount:
					new_line['amount']=lineas.amount
				if lineas.chqmanalitics:
					new_line['chqmanalitics']=lineas.chqmanalitics
				if lineas.type:
					new_line['type']=lineas.type
				if lineas.name:
					new_line['name']=lineas.name
				if lineas.partner_id.id:
					new_line['partner_id']=lineas.partner_id.id
				list_of_lines.append(new_line)
			return [ dc.name, dc.journal_id.id  , dc.total, dc.doc_type,list_of_lines]
		else:
			return [ None, None , None , None,  None ]

	def onchange_template(self, cr, uid, ids,template,doc_type, context= None):
		name,jour_id, total, doc_type,list_lines = self.evaluar_template(cr, uid, ids,template,doc_type, context= None)
		return {'value' : { 'name' : name,'journal_id' : jour_id  ,'total': total, 'doc_type' : doc_type,'mcheck_ids':list_lines }}

	def set_as_template(self, cr, uid, ids, context= None):
		if not ids: return []
		dc=self.browse(cr, uid,ids,context=None)
		return {
			'name':_("Set as Template"),
			'view_mode': 'form',
			'view_type': 'form',
		   	'res_model': 'banks.template',
		    	'type': 'ir.actions.act_window',
			'nodestroy': True,
		    	'target': 'new',
		    	'domain': '[]',
		    	'context': {'doc_id' : ids[0],'doc_type': dc.doc_type , 'hide_buttons':True}
			}

	def _get_totald(self, cr, uid, ids, field, arg, context=None):
		result = {}
		total=0
		totald=0
		totalc=0				
		for mcheck in self.browse(cr,uid,ids,context=context):
			if len(mcheck.mcheck_ids) > 0:
				for lines in mcheck.mcheck_ids:
					total+=lines.amount
					if lines.type=='dr':
						totald+=lines.amount
					if lines.type=='cr':
						totalc+=lines.amount
			result[mcheck.id]=self.addComa('%.2f'%(totald-totalc))
		return result	

	def _get_totaldebit(self, cr, uid, ids, field, arg, context=None):
		result = {}
		totald=0
		for mcheck in self.browse(cr,uid,ids,context=context):
			if len(mcheck.move_ids) > 0:
				for lines in mcheck.move_ids:
					totald+=lines.debit
			result[mcheck.id]=self.addComa('%.2f'%(totald))
		return result	

	def _get_totalcredit(self, cr, uid, ids, field, arg, context=None):
		result = {}
		for mcheck in self.browse(cr,uid,ids,context=context):
			totalc=0
			if len(mcheck.move_ids) > 0:
				for lines in mcheck.move_ids:
					totalc+=lines.credit
			result[mcheck.id]=self.addComa('%.2f'%(totalc))
		return result	


	def _get_totalt(self, cr, uid, ids, field, arg, context=None):
		result = {}
		total=0
		totald=0
		totalc=0				
		for mcheck in self.browse(cr,uid,ids,context=context):
			if len(mcheck.mcheck_ids) > 0:
				for lines in mcheck.mcheck_ids:
					total+=lines.amount
					if lines.type=='dr':
						totald+=lines.amount
					if lines.type=='cr':
						totalc+=lines.amount
			if(mcheck.journal_id.currency):
				a=self.to_word(totald-totalc,mcheck.journal_id.currency.name)
			else:
				a=self.to_word(totald-totalc,'HNL')
			result[mcheck.id]=a
		return result

	def _paying_left(self,cr, uid, ids, field, arg, context=None):
		result = {}
		tot_lined = 0
		tot_linec = 0
		for mcheck in self.browse(cr,uid,ids,context=context):
			for lines in mcheck.mcheck_ids:
				if lines.type=='dr':
					tot_lined+=lines.amount
				else:
					tot_linec+=lines.amount
			if mcheck.doc_type == 'debit':
				result[mcheck.id]=mcheck.total-(tot_lined-tot_linec)
			elif mcheck.doc_type in ['credit','deposit']:		
				result[mcheck.id]=mcheck.total-(tot_linec-tot_lined)
		return result
	
	def _get_currency(self,cr, uid, ids, field, arg, context=None):
		result={}
		for mcheck in self.browse(cr,uid,ids,context=context):
			journal_currency = mcheck.journal_id.currency.with_context(date=mcheck.date)
			result[mcheck.id] = journal_currency.rate
		return result

	def journal_number(self,cr,uid,ids,journalid,doc_type,context=None):
		if not journalid==False and doc_type !=False:
			context = dict(context or {})
			force_company = self.pool.get('res.users').browse(cr, uid, uid).company_id.id#id of the company of the user
			seq_model = self.pool.get('ir.sequence')
			name = "/"
			journal_obj = self.pool.get('account.journal')
			diario = journal_obj.browse(cr,uid,journal_obj.search(cr,uid,[('id','=',journalid)],context=None),context=context)
			seq_id=0
			fl=False
			for sq in diario.sequence_ids:
				if sq.code == doc_type:
					seq_id = sq.id
					fl = True
			if not fl:
				return None
				#raise osv.except_osv(_('Configuration Error !'),_("Please Create a sequence code with the code '"+str(doc_type)+"' or add a sequence for this journal with the code '"+str(doc_type)+"'"))	
		
			if diario.sequence_id:
				if not diario.sequence_id.active:
					raise osv.except_osv(_('Configuration Error !'),_('Please activate the sequence of selected journal !'))
				context.update({'no_update' : True})
				name = seq_model.next_by_id(cr, uid, int(seq_id),context=context)
				return  name
			else:
				return None
		else:
			return None	
	def onchange_journal(self,cr,uid,ids,journalid,doc_type,date,context=None):
		rate = None
		if doc_type is None or doc_type is False or journalid is False:
			msj=_("Selec a Type and a Journal")
		else:
			msj=_("Warnig! Please Create a sequence code with the code '"+doc_type+"' or add a sequence for this journal with the code '"+doc_type+"'")
		n=self.journal_number(cr,uid,ids,journalid,doc_type,context=None)
		journal_pool = self.pool.get('account.journal')
		journal = journal_pool.browse(cr,uid,journalid,context=context)
		user_pool = self.pool.get('res.users')
		user_obj = user_pool.browse(cr, uid, uid, context = context)
		if journal.currency:
			if journal.currency.base:
				rate = user_obj.company_id.rate
			elif journal.currency.id == user_obj.company_id.id:
				rate = False
			else:
				company_rate = 0
				journal_currency = journal.currency.with_context(date=date)
				rate  = journal_currency.rate
		if n is None or n is False:
			return { 'value' :{ 'number' : n,'number_calc' : n,'msg' : msj,'currency' : rate}}
		else:
			return { 'value' :{ 'number' : n,'number_calc' : n,'msg' : None, 'currency' : rate}}
		
	def unlink(self, cr, uid, ids, context=None):
		dcs = self.pool.get('debit.credit').browse(cr,uid,ids,context=context)
		flag = False
		for dc in dcs:
			if dc.state not in  ['draft'] or dc.was_unreconcilied:
				flag = True
		if flag:
			raise osv.except_osv(_('Error!'),_("You can not delete a debit or credit when it has a diferent state than Draft or it has been unreconcilied!"))		
		else:
			return super(debit_credit, self).unlink(cr, uid, ids, context=context)

	def create(self, cr, uid, values, context=None):
		journal = self.pool.get('account.journal').browse(cr, uid , values['journal_id'],context=context)
		if journal.company_id.id:
			values['jour_company_id'] = journal.company_id.id
		else:
			values['jour_company_id']= self.pool.get('res.user').browse(cr,uid,uid, context=context).company_id.id
		if values['number'] is not None and  values['number'] is not False:
			b =super(debit_credit, self).create(cr, uid, values, context=context)
			if b:
				return b
			else:	
				return False	
		else:
			raise osv.except_osv(_('Configuration Error !'),_("Please Create a sequence code with the code '"+str(values['doc_type'])+"' or add a sequence for this journal with the code '"+str(values['doc_type'])+"'"))	
	#def _currence_factor(self, cr, uid, ids, context=None):
	def _calculate_number(self,cr, uid, ids, field, arg, context=None):
		result={}
		for mcheck in self.browse(cr,uid,ids,context=context):
			result[mcheck.id]=mcheck.number
		return result
				
	def _get_msg(self,cr, uid, ids, field, arg, context=None):
		result={}
		for mcheck in self.browse(cr,uid,ids,context=context):
			result[mcheck.id]=None
		return result
	
	def unreconciliate_debit(self, cr, uid, ids, context=None):
		reconcile_pool = self.pool.get('account.move.reconcile')
		move_pool = self.pool.get('account.move')
		move_line_pool = self.pool.get('account.move.line')
		doc_type = ''
		journal_id = False
		for debit_credit in self.browse(cr, uid, ids, context=context):
			# refresh to make sure you don't unlink an already removed move
			doc_type = debit_credit.doc_type
			journal_id = debit_credit.journal_id.id
			debit_credit.refresh()
			if debit_credit.move_id:
				move_pool.button_cancel(cr, uid, [debit_credit.move_id.id])
				move_pool.unlink(cr, uid, [debit_credit.move_id.id])
		res = {
		    'state':'draft',
		    'move_id':False,
		    'was_unreconcilied': True ,
		}
		self.write(cr, uid, ids, res)
		self._update_draft(cr,uid, ids,journal_id,doc_type, context=context)
		return True

	
	@api.one
   	@api.depends('mcheck_ids.amount', 'total','doc_type' )
	def _compute_rest_credit(self):
		tot_lined = 0
		tot_linec = 0
		for lines in self.mcheck_ids:
			if lines.type=='dr':
				tot_lined+=lines.amount 
			elif lines.type=='cr':
				tot_linec+=lines.amount
			else:
				tot_linec+=0
				tot_lined+=0
		if self.doc_type == 'debit':
			self.rest_credit = self.total-(tot_lined-tot_linec)
		elif self.doc_type in ['credit','deposit']:		
			self.rest_credit = self.total-(tot_linec-tot_lined)
		else:
			self.rest_credit = 0

	_columns={
        'move_id':fields.many2one('account.move', 'Account Entry', copy=False),
	                'journal_id':fields.many2one('account.journal', 'Journal',required=True ),
		'name':fields.text('Memo', required=True),
		'date':fields.date('Date',  select=True, 
                           help="Effective date for accounting entries", ),
		'amount': fields.function(_get_totald,type='char',string='Total', ),
		'amountdebit': fields.function(_get_totaldebit,type='char',string='Total', ),
		'amountcredit': fields.function(_get_totalcredit,type='char',string='Total',),
		'amounttext': fields.function(_get_totalt,type='char',string='Total',),
		'total': fields.float(string='Total',required=True,track_visibility='onchange',),
		'template_id' : fields.many2one('banks.template','Template' ),
		'currency': fields.function(_get_currency,type='float',string='Currency',),
		'jour_company_id' : fields.integer(string='Company',),
		'was_unreconcilied': fields.boolean(string='Unreconcilied'),
		#'temporal_code': fields.char(string='Temporal Code',),
		'doc_type' : fields.selection([
						('debit','Debit'),
						('credit','Credit'),
						('deposit','deposit')],string='Type'),
		'tax_amount':fields.float('Tax Amount', digits_compute=dp.get_precision('Account'), ),
		#'reference': fields.char('Pay to', 
		#                         help="Transaction reference number.", copy=False,required=True),
		'rest_credit' : fields.float( string='Debit left', store=False,compute='_compute_rest_credit',),
		'actual_comp_rate' : fields.float('Company rate'),
		'actual_sec_curr_rate' : fields.float('Actual Secundary Currency Rate'), #date of the anulation of the check
		#'currency_rate' : fields.function(_calculate_currency,type='float')
		'number': fields.char('Number'),
		'number_calc': fields.function(_calculate_number, type='char', string='Number', store=False),
		'msg': fields.function(_get_msg, type='char',  store=False),
		'obs':fields.text('obs',  ),
        	'type':fields.selection([
			('sale','Sale'),
			('purchase','Purchase'),
			('payment','Payment'),
			('receipt','Receipt'),
			],'Default Type', ),		 
		'mcheck_ids' :fields.one2many('debit.credit.name','mcheck_id',string="Debit and Credit lines"),
		'move_ids' :fields.one2many('account.move.line','credit_debit_id',string="Move lines"),
		'state':fields.selection(
		    [('draft','Draft'),
		     ('validated','Validated'),
		     ('anulated','Anulated'),
		    ], 'Status', 
		    help=' * The \'Draft\' status is used when a user is encoding a new and unconfirmed Voucher. \
		                \n* The \'Validated \' when validated', track_visibility='onchange',),

	}
	_order = 'number desc, date desc'
	_defaults = {
	'state' : 'draft',
	'type' : 'payment',
 	'date': lambda *a: time.strftime('%Y-%m-%d'),
	'doc_type' : 'debit',
	'msg' : None
		    } 
	
	
	
	# Para definir la moneda me estoy basando en los código que establece el ISO 4217
	# Decidí poner las variables en inglés, porque es más sencillo de ubicarlas sin importar el país
	# Si, ya sé que Europa no es un país, pero no se me ocurrió un nombre mejor para la clave.
	

	@api.multi
    	def copy(self, default=None):
		default = dict(default or {})
		default['number'] = self.journal_number(self.journal_id.id, self.doc_type)
		default['state'] ='draft'
		default['date'] = datetime.now()
		encabezado = super(debit_credit, self).copy(default)
		for line in self.mcheck_ids:
			a = self.env['debit.credit.name'].create({'mcheck_id': encabezado.id, 'account_id': line.account_id.id, 'name':line.name, 'amount': line.amount, 'chqmanalitics': line.chqmanalitics.id, 'type':line.type})

		return encabezado

	

	def to_word(self,number, mi_moneda):
	    valor= number
	    number=int(number)
	    centavos=int((round(valor-number,2))*100)
	    UNIDADES = (
	    '',
	    'UN ',
	    'DOS ',
	    'TRES ',
	    'CUATRO ',
	    'CINCO ',
	    'SEIS ',
	    'SIETE ',
	    'OCHO ',
	    'NUEVE ',
	    'DIEZ ',
	    'ONCE ',
	    'DOCE ',
	    'TRECE ',
	    'CATORCE ',
	    'QUINCE ',
	    'DIECISEIS ',
	    'DIECISIETE ',
	    'DIECIOCHO ',
	    'DIECINUEVE ',
	    'VEINTE '
	)

	    DECENAS = (
	    'VENTI',
	    'TREINTA ',
	    'CUARENTA ',
	    'CINCUENTA ',
	    'SESENTA ',
	    'SETENTA ',
	    'OCHENTA ',
	    'NOVENTA ',
	    'CIEN '
	)

	    CENTENAS = (
	    'CIENTO ',
	    'DOSCIENTOS ',
	    'TRESCIENTOS ',
	    'CUATROCIENTOS ',
	    'QUINIENTOS ',
	    'SEISCIENTOS ',
	    'SETECIENTOS ',
	    'OCHOCIENTOS ',
	    'NOVECIENTOS '
	)
	    MONEDAS = (
		    {'country': u'Colombia', 'currency': 'COP', 'singular': u'PESO COLOMBIANO', 'plural': u'PESOS COLOMBIANOS', 'symbol': u'$'},
		    {'country': u'Honduras', 'currency': 'HNL', 'singular': u'Lempira', 'plural': u'Lempiras', 'symbol': u'L'},
		    {'country': u'Estados Unidos', 'currency': 'USD', 'singular': u'DÓLAR', 'plural': u'DÓLARES', 'symbol': u'US$'},
		    {'country': u'Europa', 'currency': 'EUR', 'singular': u'EURO', 'plural': u'EUROS', 'symbol': u'€'},
		    {'country': u'México', 'currency': 'MXN', 'singular': u'PESO MEXICANO', 'plural': u'PESOS MEXICANOS', 'symbol': u'$'},
		    {'country': u'Perú', 'currency': 'PEN', 'singular': u'NUEVO SOL', 'plural': u'NUEVOS SOLES', 'symbol': u'S/.'},
		    {'country': u'Reino Unido', 'currency': 'GBP', 'singular': u'LIBRA', 'plural': u'LIBRAS', 'symbol': u'£'}
		)
	    if mi_moneda != None:
		try:
		    moneda = ifilter(lambda x: x['currency'] == mi_moneda, MONEDAS).next()
		    if number < 2:
		        moneda = moneda['singular']
		    else:
		        moneda = moneda['plural']
		except:
		    return "Tipo de moneda inválida"
	    else:
		moneda = ""
	    """Converts a number into string representation"""
	    converted = ''

	    if not (0 < number < 999999999):
		return 'No es posible convertir el numero a letras'

	    number_str = str(number).zfill(9)
	    millones = number_str[:3]
	    miles = number_str[3:6]
	    cientos = number_str[6:]

	    if(millones):
		if(millones == '001'):
		    converted += 'UN MILLON '
		elif(int(millones) > 0):
		    converted += '%sMILLONES ' % self.convert_group(millones)

	    if(miles):
		if(miles == '001'):
		    converted += 'MIL '
		elif(int(miles) > 0):
		    converted += '%sMIL ' % self.convert_group(miles)

	    if(cientos):
		if(cientos == '001'):
		    converted += 'UN '
		elif(int(cientos) > 0):
		    converted += '%s ' % self.convert_group(cientos)
	    if(centavos)>0:
		converted+= "con %2i/100 "%centavos
	    converted += moneda

	    return converted.title()


	def convert_group(self,n):
	    UNIDADES = (
	    '',
	    'UN ',
	    'DOS ',
	    'TRES ',
	    'CUATRO ',
	    'CINCO ',
	    'SEIS ',
	    'SIETE ',
	    'OCHO ',
	    'NUEVE ',
	    'DIEZ ',
	    'ONCE ',
	    'DOCE ',
	    'TRECE ',
	    'CATORCE ',
	    'QUINCE ',
	    'DIECISEIS ',
	    'DIECISIETE ',
	    'DIECIOCHO ',
	    'DIECINUEVE ',
	    'VEINTE '
	)

	    DECENAS = (
	    'VENTI',
	    'TREINTA ',
	    'CUARENTA ',
	    'CINCUENTA ',
	    'SESENTA ',
	    'SETENTA ',
	    'OCHENTA ',
	    'NOVENTA ',
	    'CIEN '
	)

	    CENTENAS = (
	    'CIENTO ',
	    'DOSCIENTOS ',
	    'TRESCIENTOS ',
	    'CUATROCIENTOS ',
	    'QUINIENTOS ',
	    'SEISCIENTOS ',
	    'SETECIENTOS ',
	    'OCHOCIENTOS ',
	    'NOVECIENTOS '
	)
	    MONEDAS = (
		    {'country': u'Colombia', 'currency': 'COP', 'singular': u'PESO COLOMBIANO', 'plural': u'PESOS COLOMBIANOS', 'symbol': u'$'},
		    {'country': u'Honduras', 'currency': 'HNL', 'singular': u'Lempira', 'plural': u'Lempiras', 'symbol': u'L'},
		    {'country': u'Estados Unidos', 'currency': 'USD', 'singular': u'DÓLAR', 'plural': u'DÓLARES', 'symbol': u'US$'},
		    {'country': u'Europa', 'currency': 'EUR', 'singular': u'EURO', 'plural': u'EUROS', 'symbol': u'€'},
		    {'country': u'México', 'currency': 'MXN', 'singular': u'PESO MEXICANO', 'plural': u'PESOS MEXICANOS', 'symbol': u'$'},
		    {'country': u'Perú', 'currency': 'PEN', 'singular': u'NUEVO SOL', 'plural': u'NUEVOS SOLES', 'symbol': u'S/.'},
		    {'country': u'Reino Unido', 'currency': 'GBP', 'singular': u'LIBRA', 'plural': u'LIBRAS', 'symbol': u'£'}
		)
	    """Turn each group of numbers into letters"""
	    output = ''

	    if(n == '100'):
		output = "CIEN "
	    elif(n[0] != '0'):
		output = CENTENAS[int(n[0]) - 1]

	    k = int(n[1:])
	    if(k <= 20):
		output += UNIDADES[k]
	    else:
		if((k > 30) & (n[2] != '0')):
		    output += '%sY %s' % (DECENAS[int(n[1]) - 2], UNIDADES[int(n[2])])
		else:
		    output += '%s%s' % (DECENAS[int(n[1]) - 2], UNIDADES[int(n[2])])

	    return output

	def addComa(self, snum ):
		s = snum;
		i = s.index('.') # Se busca la posición del punto decimal
		while i > 3:
			i = i - 3
			s = s[:i] +  ',' + s[i:]
		return s




class mcheck_name(osv.Model):
			
	_name='debit.credit.name'
		
	
	_columns = {
		'mcheck_id':fields.many2one('debit.credit','debit and credit '),
	        'account_id':fields.many2one('account.account','Account',domain=[('type','not in',['view'])],required=True),
		'name':fields.char('Description',),
		'amount':fields.float('Amount', digits_compute=dp.get_precision('Account')),
		'chqmanalitics':fields.many2one("account.analytic.account",string="Check Misc Analiticos"),	
        	'type':fields.selection([('dr','Debit'),('cr','Credit')], 'Dr/Cr'),
		'partner_id' : fields.many2one('res.partner', 'Partner'),
		
}

	_defaults = {
	'type' : lambda self, cr, uid, context: 'dr' if context and context['type'] and context['type']=='debit' else 'cr', 
		} 
class account_move_line(osv.osv):
	_inherit = 'account.move.line'
	_columns = {
		'credit_debit_id':fields.many2one('debit.credit','Debit/Credit'),
		}
